;;; Returns the exponent from a variable (v Exp VarSymbol)
(defun varpower-power (vp)
  (let ((pow (second vp)))
      (cond ((numberp pow) pow)
            (t (error "L'esponente non è un numero")))))

;;; Returns the varsymbol from a variable (v Exp VarSymbol)  
(defun varpower-symbol (vp)
  (let ((vs (third vp)))
    (cond ((and
           (atom vs)
           (not (numberp vs))) vs)
          (t (error "La variabile non è un carattere")))))
  
;;; Returns the monomial's VPs
(defun monomial-vars-and-powers (mono)
  (and (= (length mono) 4)
       (let ((vps (fourth mono)))
         (cond ((null vps) nil)
               (T vps)))))

;;; Returns the monomial's TD
(defun monomial-total-degree (mono)
  (and (= (length mono) 4)
       (let ((mtd (third mono)))
         (cond ((>= mtd 0) mtd)
               (T (error "Grado minore di 0"))))))

;;; (m coefficient total-degree vars-n-powers)
(defun is-monomial (m)
  (and (listp m)
       (eq 'm (first m))
       (let ((mtd (monomial-total-degree m))
             (vps (monomial-vars-and-powers m))
            )
          (and (integerp mtd)
               (>= mtd 0)
               (listp vps)
               (every #'is-varpower vps)))))

;;; (v power var-symbol)
(defun is-varpower(vp)
  (and (listp vp)
       (eq 'v (first vp))
       (let ((p (varpower-power vp))
             (v (varpower-symbol vp))
            )
         (and (integerp p)
              (>= p 0)
              (symbolp v)))))

;;; (poly monomials)
(defun is-polynomial (p)
  (and (listp p)
       (eq 'poly (first p))
       (let ((ms (poly-monomials p)))
         (and (listp ms)
              (every #'is-monomial ms)))))

